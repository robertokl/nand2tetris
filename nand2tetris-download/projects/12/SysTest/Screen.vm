function Screen.init 1
push constant 0
not
pop static 0
push constant 16384
pop static 1
push constant 0
return
function Screen.clearScreen 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 4
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push static 1
push local 0
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push argument 0
push constant 16
call Math.mod 2
pop local 3
push static 0
not
if-goto Screen.ifFalse$1
push local 1
push local 3
call Math.powerOfTwo 1
or
pop local 2
goto Screen.ifEnd$1
label Screen.ifFalse$1
push local 1
push local 3
call Math.powerOfTwo 1
not
and
pop local 2
label Screen.ifEnd$1
push local 0
push local 2
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.updateScreen 1
push static 1
push argument 0
add
pop argument 0
push argument 0
call Memory.peek 1
pop local 0
push argument 2
push argument 1
and
pop argument 1
push argument 2
not
pop argument 2
push argument 2
push local 0
and
pop local 0
push argument 1
push local 0
or
pop argument 1
push argument 0
push argument 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 0
push argument 1
push argument 3
eq
not
if-goto Screen.ifFalse$2
push argument 0
push argument 1
push argument 2
push argument 3
call Screen.drawStraightLine 4
pop temp 0
goto Screen.ifEnd$2
label Screen.ifFalse$2
push argument 0
push argument 1
push argument 2
push argument 3
call Screen.drawDiagonalLine 4
pop temp 0
label Screen.ifEnd$2
push constant 0
return
function Screen.drawStraightLine 5
push argument 0
push argument 2
gt
not
if-goto Screen.ifFalse$3
push argument 2
pop local 3
push argument 0
pop argument 2
push local 3
pop argument 0
goto Screen.ifEnd$3
label Screen.ifFalse$3
label Screen.ifEnd$3
push constant 16
push argument 0
push constant 16
call Math.mod 2
sub
pop local 0
push argument 2
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
pop local 1
push argument 0
pop local 3
label Screen.while$4
push local 3
push argument 0
push local 0
add
lt
push local 3
push constant 1
sub
push argument 2
lt
and
not
if-goto Screen.whileEnd$4
push local 3
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 3
push constant 1
add
pop local 3
goto Screen.while$4
label Screen.whileEnd$4
push argument 0
push local 0
add
pop local 0
push local 0
push argument 2
gt
not
if-goto Screen.ifFalse$5
push constant 0
return
goto Screen.ifEnd$5
label Screen.ifFalse$5
label Screen.ifEnd$5
push local 1
pop local 3
label Screen.while$6
push local 3
push constant 1
sub
push argument 2
lt
not
if-goto Screen.whileEnd$6
push local 3
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 3
push constant 1
add
pop local 3
goto Screen.while$6
label Screen.whileEnd$6
push constant 32
push argument 1
call Math.multiply 2
push local 0
push constant 16
call Math.divide 2
add
pop local 2
push static 1
push local 2
add
pop local 2
push constant 32
push argument 1
call Math.multiply 2
push local 1
push constant 16
call Math.divide 2
add
pop local 3
push static 1
push local 3
add
pop local 3
push static 0
not
if-goto Screen.ifFalse$7
push constant 1
neg
pop local 4
goto Screen.ifEnd$7
label Screen.ifFalse$7
push constant 0
pop local 4
label Screen.ifEnd$7
label Screen.while$8
push local 2
push local 3
lt
not
if-goto Screen.whileEnd$8
push local 2
push local 4
call Memory.poke 2
pop temp 0
push local 2
push constant 1
add
pop local 2
goto Screen.while$8
label Screen.whileEnd$8
push constant 0
return
function Screen.drawDiagonalLine 7
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 4
push argument 0
push argument 2
gt
not
if-goto Screen.ifFalse$9
push constant 1
neg
pop local 2
goto Screen.ifEnd$9
label Screen.ifFalse$9
push constant 1
pop local 2
label Screen.ifEnd$9
push argument 1
push argument 3
gt
not
if-goto Screen.ifFalse$10
push constant 1
neg
pop local 3
goto Screen.ifEnd$10
label Screen.ifFalse$10
push constant 1
pop local 3
label Screen.ifEnd$10
push argument 0
push argument 2
sub
call Math.abs 1
pop local 5
push argument 1
push argument 3
sub
call Math.abs 1
pop local 6
label Screen.while$11
push local 0
call Math.abs 1
push local 5
push constant 1
add
lt
push local 1
call Math.abs 1
push local 6
push constant 1
add
lt
and
not
if-goto Screen.whileEnd$11
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
not
if-goto Screen.ifFalse$12
push local 0
push local 2
add
pop local 0
push local 4
push local 6
add
pop local 4
goto Screen.ifEnd$12
label Screen.ifFalse$12
push local 1
push local 3
add
pop local 1
push local 4
push local 5
sub
pop local 4
label Screen.ifEnd$12
goto Screen.while$11
label Screen.whileEnd$11
push constant 0
return
function Screen.drawRectangle 1
push argument 1
pop local 0
label Screen.while$13
push local 0
push constant 1
sub
push argument 3
lt
not
if-goto Screen.whileEnd$13
push argument 0
push local 0
push argument 2
push local 0
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto Screen.while$13
label Screen.whileEnd$13
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 0
label Screen.while$14
push local 0
push constant 1
sub
push argument 2
lt
not
if-goto Screen.whileEnd$14
push argument 0
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
sub
pop local 1
push argument 0
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
add
pop local 2
push local 1
push argument 1
push local 0
add
push local 2
push argument 1
push local 0
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto Screen.while$14
label Screen.whileEnd$14
push constant 0
return