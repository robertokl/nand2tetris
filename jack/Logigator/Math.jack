// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n, nsqrt;      // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i;
        let n = 16;
        let nsqrt = 7;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let i = 1;
        while (i < n) {
            let powersOfTwo[i] = powersOfTwo[i - 1] + powersOfTwo[i - 1];
            let i = i + 1;
        }
        return;
    }

    // Returns true if the bit of x on position i is 1.
    function boolean bit(int x, int i) {
        return ~((powersOfTwo[i] & x) = 0);
    }

    function int powerOfTwo(int x) {
        return powersOfTwo[x];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < n) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int sign, r;
        let sign = 1;
        if (x < 0) {
            let sign = -1;
        }
        if (y < 0) {
            let sign = -sign;
        }
        let r = Math.divideAbs(Math.abs(x), Math.abs(y));
        if (sign < 0) {
            let r = -r;
        }
        return r;
    }

    // Computes division after numbers have been made positive.
    function int divideAbs(int x, int y) {
        var int q, w;
        if ((y > x) | (y < 0)) { return 0; }
        let q = Math.divideAbs(x, y + y);
        let w = q * y;
        if ((x - (w + w)) < y) {
            return q + q;
        }
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, pow, t, tsq;
        let y = 0;
        let j = nsqrt;
        while (j > -1) {
            let pow = powersOfTwo[j];
            let t = y + pow;
            let tsq = t * t;
            if (((tsq - 1) < x) & (tsq > 0)){
                let y = t;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } 
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    function int mod(int x, int y){
        return (x - (y * (x / y)));
    }

    function int divideBy2(int x) {
        var int result;
        if (x = 0) {
            return 0;
        }
        let result = 1;
        while ((result + result) < x) {
            let result = result + result;
        }
        while ((result + result) > x) {
            let result = result - 1;
        }
        return result;
    }
}
