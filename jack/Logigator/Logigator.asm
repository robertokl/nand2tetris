// Setup memory segments
@256 // Stack
D=A
@SP
M=D
@300 // LCL
D=A
@LCL
M=D
@400 // ARG
D=A
@ARG
M=D
@3000 // THIS
D=A
@THIS
M=D
@3010 // THAT
D=A
@THAT
M=D
// call Sys.init 0
@.Sys.init$ret.32768
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(.Sys.init$ret.32768)
// label PROGRAMEND
(PROGRAMEND)
// goto PROGRAMEND
@PROGRAMEND
0;JMP

// Code starts
// function Array.new 0
(Array.new)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc 1
@Array.Memory.alloc$ret.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.Memory.alloc$ret.3)
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Array.dispose 0
(Array.dispose)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc 1
@Array.Memory.deAlloc$ret.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.Memory.deAlloc$ret.9)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Main.main 6
(Main.main)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1
@Main.String.new$ret.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.String.new$ret.3)
// push constant 72
@72
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@Main.String.appendChar$ret.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.String.appendChar$ret.5)
// push constant 101
@101
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@Main.String.appendChar$ret.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.String.appendChar$ret.7)
// push constant 108
@108
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@Main.String.appendChar$ret.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.String.appendChar$ret.9)
// push constant 108
@108
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@Main.String.appendChar$ret.11
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.String.appendChar$ret.11)
// push constant 111
@111
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@Main.String.appendChar$ret.13
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.String.appendChar$ret.13)
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.moveCursor 2
@Main.Output.moveCursor$ret.17
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(Main.Output.moveCursor$ret.17)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printString 1
@Main.Output.printString$ret.20
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Main.Output.printString$ret.20)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Screen.refresh 0
@Main.Screen.refresh$ret.22
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.refresh
0;JMP
(Main.Screen.refresh$ret.22)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Main.while$1
(Main.while$1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto Main.whileEnd$1
@SP
M=M-1
A=M
D=M
@Main.whileEnd$1
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Main.while$2
(Main.while$2)
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Main.JUMPTRUE36
D;JLT
D=0
@Main.JUMPWRITE36
0;JMP
(Main.JUMPTRUE36)
D=-1
(Main.JUMPWRITE36)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Main.whileEnd$2
@SP
M=M-1
A=M
D=M
@Main.whileEnd$2
D;JNE
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Screen.getAddress 2
@Main.Screen.getAddress$ret.41
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.getAddress
0;JMP
(Main.Screen.getAddress$ret.41)
// pop local 4
@4
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 4
@4
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.peek 1
@Main.Memory.peek$ret.44
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Main.Memory.peek$ret.44)
// pop local 3
@3
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.bit 2
@Main.Math.bit$ret.50
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.bit
0;JMP
(Main.Math.bit$ret.50)
// not
@SP
A=M-1
M=!M
// if-goto Main.ifFalse$3
@SP
M=M-1
A=M
D=M
@Main.ifFalse$3
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Main.ifEnd$3
@Main.ifEnd$3
0;JMP
// label Main.ifFalse$3
(Main.ifFalse$3)
// label Main.ifEnd$3
(Main.ifEnd$3)
// push local 5
@5
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.moveChar 3
@Main.Main.moveChar$ret.62
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@3
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.moveChar
0;JMP
(Main.Main.moveChar$ret.62)
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 5
@5
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.moveChar 3
@Main.Main.moveChar$ret.67
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@3
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.moveChar
0;JMP
(Main.Main.moveChar$ret.67)
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 5
@5
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 40
@40
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.moveChar 3
@Main.Main.moveChar$ret.72
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@3
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.moveChar
0;JMP
(Main.Main.moveChar$ret.72)
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 5
@5
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.moveChar 3
@Main.Main.moveChar$ret.77
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@3
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.moveChar
0;JMP
(Main.Main.moveChar$ret.77)
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 5
@5
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.moveChar 3
@Main.Main.moveChar$ret.82
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@3
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.moveChar
0;JMP
(Main.Main.moveChar$ret.82)
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 5
@5
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.moveChar 3
@Main.Main.moveChar$ret.87
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@3
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.moveChar
0;JMP
(Main.Main.moveChar$ret.87)
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 5
@5
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.moveChar 3
@Main.Main.moveChar$ret.92
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@3
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.moveChar
0;JMP
(Main.Main.moveChar$ret.92)
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 5
@5
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.moveChar 3
@Main.Main.moveChar$ret.97
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@3
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.moveChar
0;JMP
(Main.Main.moveChar$ret.97)
// pop local 5
@5
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Main.while$2
@Main.while$2
0;JMP
// label Main.whileEnd$2
(Main.whileEnd$2)
// call Screen.refresh 0
@Main.Screen.refresh$ret.105
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.refresh
0;JMP
(Main.Screen.refresh$ret.105)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Main.while$1
@Main.while$1
0;JMP
// label Main.whileEnd$1
(Main.whileEnd$1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Main.moveChar 3
(Main.moveChar)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 2
@2
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.getAddress 2
@Main.Screen.getAddress$ret.118
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.getAddress
0;JMP
(Main.Screen.getAddress$ret.118)
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.peek 1
@Main.Memory.peek$ret.121
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Main.Memory.peek$ret.121)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto Main.ifFalse$4
@SP
M=M-1
A=M
D=M
@Main.ifFalse$4
D;JNE
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 256
@256
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Main.ifEnd$4
@Main.ifEnd$4
0;JMP
// label Main.ifFalse$4
(Main.ifFalse$4)
// label Main.ifEnd$4
(Main.ifEnd$4)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.bit 2
@Main.Math.bit$ret.137
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.bit
0;JMP
(Main.Math.bit$ret.137)
// not
@SP
A=M-1
M=!M
// if-goto Main.ifFalse$5
@SP
M=M-1
A=M
D=M
@Main.ifFalse$5
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Main.ifEnd$5
@Main.ifEnd$5
0;JMP
// label Main.ifFalse$5
(Main.ifFalse$5)
// label Main.ifEnd$5
(Main.ifEnd$5)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// shiftr
@SP
A=M-1
D=M
M=>>D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.poke 2
@Main.Memory.poke$ret.151
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.Memory.poke$ret.151)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.init 1
(Math.init)
@SP
M=M+1
A=M-1
M=0
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 0
@Math.0
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@Math.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.new 1
@Math.Array.new$ret.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.Array.new$ret.7)
// pop static 2
@Math.2
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 2
@Math.2
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Math.while$1
(Math.while$1)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE22
D;JLT
D=0
@Math.JUMPWRITE22
0;JMP
(Math.JUMPTRUE22)
D=-1
(Math.JUMPWRITE22)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.whileEnd$1
@SP
M=M-1
A=M
D=M
@Math.whileEnd$1
D;JNE
// push static 2
@Math.2
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push static 2
@Math.2
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static 2
@Math.2
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.while$1
@Math.while$1
0;JMP
// label Math.whileEnd$1
(Math.whileEnd$1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.bit 0
(Math.bit)
// push static 2
@Math.2
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE64
D;JEQ
D=0
@Math.JUMPWRITE64
0;JMP
(Math.JUMPTRUE64)
D=-1
(Math.JUMPWRITE64)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.powerOfTwo 0
(Math.powerOfTwo)
// push static 2
@Math.2
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.multiply 3
(Math.multiply)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Math.while$2
(Math.while$2)
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static 0
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE84
D;JLT
D=0
@Math.JUMPWRITE84
0;JMP
(Math.JUMPTRUE84)
D=-1
(Math.JUMPWRITE84)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.whileEnd$2
@SP
M=M-1
A=M
D=M
@Math.whileEnd$2
D;JNE
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.bit 2
@Math.Math.bit$ret.89
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.bit
0;JMP
(Math.Math.bit$ret.89)
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$3
@SP
M=M-1
A=M
D=M
@Math.ifFalse$3
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.ifEnd$3
@Math.ifEnd$3
0;JMP
// label Math.ifFalse$3
(Math.ifFalse$3)
// label Math.ifEnd$3
(Math.ifEnd$3)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.while$2
@Math.while$2
0;JMP
// label Math.whileEnd$2
(Math.whileEnd$2)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.divide 2
(Math.divide)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE116
D;JLT
D=0
@Math.JUMPWRITE116
0;JMP
(Math.JUMPTRUE116)
D=-1
(Math.JUMPWRITE116)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$4
@SP
M=M-1
A=M
D=M
@Math.ifFalse$4
D;JNE
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=M-1
M=!M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.ifEnd$4
@Math.ifEnd$4
0;JMP
// label Math.ifFalse$4
(Math.ifFalse$4)
// label Math.ifEnd$4
(Math.ifEnd$4)
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE127
D;JLT
D=0
@Math.JUMPWRITE127
0;JMP
(Math.JUMPTRUE127)
D=-1
(Math.JUMPWRITE127)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$5
@SP
M=M-1
A=M
D=M
@Math.ifFalse$5
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=M-1
M=!M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.ifEnd$5
@Math.ifEnd$5
0;JMP
// label Math.ifFalse$5
(Math.ifFalse$5)
// label Math.ifEnd$5
(Math.ifEnd$5)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs 1
@Math.Math.abs$ret.137
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.abs$ret.137)
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs 1
@Math.Math.abs$ret.139
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.abs$ret.139)
// call Math.divideAbs 2
@Math.Math.divideAbs$ret.140
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divideAbs
0;JMP
(Math.Math.divideAbs$ret.140)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE144
D;JLT
D=0
@Math.JUMPWRITE144
0;JMP
(Math.JUMPTRUE144)
D=-1
(Math.JUMPWRITE144)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$6
@SP
M=M-1
A=M
D=M
@Math.ifFalse$6
D;JNE
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=M-1
M=!M
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.ifEnd$6
@Math.ifEnd$6
0;JMP
// label Math.ifFalse$6
(Math.ifFalse$6)
// label Math.ifEnd$6
(Math.ifEnd$6)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.divideAbs 2
(Math.divideAbs)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE158
D;JGT
D=0
@Math.JUMPWRITE158
0;JMP
(Math.JUMPTRUE158)
D=-1
(Math.JUMPWRITE158)
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE161
D;JLT
D=0
@Math.JUMPWRITE161
0;JMP
(Math.JUMPTRUE161)
D=-1
(Math.JUMPWRITE161)
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D|M
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$7
@SP
M=M-1
A=M
D=M
@Math.ifFalse$7
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.ifEnd$7
@Math.ifEnd$7
0;JMP
// label Math.ifFalse$7
(Math.ifFalse$7)
// label Math.ifEnd$7
(Math.ifEnd$7)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// call Math.divideAbs 2
@Math.Math.divideAbs$ret.174
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divideAbs
0;JMP
(Math.Math.divideAbs$ret.174)
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2
@Math.Math.multiply$ret.178
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.Math.multiply$ret.178)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE186
D;JLT
D=0
@Math.JUMPWRITE186
0;JMP
(Math.JUMPTRUE186)
D=-1
(Math.JUMPWRITE186)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$8
@SP
M=M-1
A=M
D=M
@Math.ifFalse$8
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.ifEnd$8
@Math.ifEnd$8
0;JMP
// label Math.ifFalse$8
(Math.ifFalse$8)
// label Math.ifEnd$8
(Math.ifEnd$8)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.sqrt 5
(Math.sqrt)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 1
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Math.while$9
(Math.while$9)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=M-1
M=!M
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE211
D;JGT
D=0
@Math.JUMPWRITE211
0;JMP
(Math.JUMPTRUE211)
D=-1
(Math.JUMPWRITE211)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.whileEnd$9
@SP
M=M-1
A=M
D=M
@Math.whileEnd$9
D;JNE
// push static 2
@Math.2
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 3
@3
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2
@Math.Math.multiply$ret.226
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.Math.multiply$ret.226)
// pop local 4
@4
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 4
@4
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE232
D;JLT
D=0
@Math.JUMPWRITE232
0;JMP
(Math.JUMPTRUE232)
D=-1
(Math.JUMPWRITE232)
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE235
D;JGT
D=0
@Math.JUMPWRITE235
0;JMP
(Math.JUMPTRUE235)
D=-1
(Math.JUMPWRITE235)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$10
@SP
M=M-1
A=M
D=M
@Math.ifFalse$10
D;JNE
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.ifEnd$10
@Math.ifEnd$10
0;JMP
// label Math.ifFalse$10
(Math.ifFalse$10)
// label Math.ifEnd$10
(Math.ifEnd$10)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.while$9
@Math.while$9
0;JMP
// label Math.whileEnd$9
(Math.whileEnd$9)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.max 0
(Math.max)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE255
D;JGT
D=0
@Math.JUMPWRITE255
0;JMP
(Math.JUMPTRUE255)
D=-1
(Math.JUMPWRITE255)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$11
@SP
M=M-1
A=M
D=M
@Math.ifFalse$11
D;JNE
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.ifEnd$11
@Math.ifEnd$11
0;JMP
// label Math.ifFalse$11
(Math.ifFalse$11)
// label Math.ifEnd$11
(Math.ifEnd$11)
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.min 0
(Math.min)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE268
D;JLT
D=0
@Math.JUMPWRITE268
0;JMP
(Math.JUMPTRUE268)
D=-1
(Math.JUMPWRITE268)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$12
@SP
M=M-1
A=M
D=M
@Math.ifFalse$12
D;JNE
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.ifEnd$12
@Math.ifEnd$12
0;JMP
// label Math.ifFalse$12
(Math.ifFalse$12)
// label Math.ifEnd$12
(Math.ifEnd$12)
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.abs 0
(Math.abs)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE281
D;JLT
D=0
@Math.JUMPWRITE281
0;JMP
(Math.JUMPTRUE281)
D=-1
(Math.JUMPWRITE281)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$13
@SP
M=M-1
A=M
D=M
@Math.ifFalse$13
D;JNE
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=M-1
M=!M
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.ifEnd$13
@Math.ifEnd$13
0;JMP
// label Math.ifFalse$13
(Math.ifFalse$13)
// label Math.ifEnd$13
(Math.ifEnd$13)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.mod 0
(Math.mod)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2
@Math.Math.divide$ret.297
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.Math.divide$ret.297)
// call Math.multiply 2
@Math.Math.multiply$ret.298
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.Math.multiply$ret.298)
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.divideBy2 1
(Math.divideBy2)
@SP
M=M+1
A=M-1
M=0
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE304
D;JEQ
D=0
@Math.JUMPWRITE304
0;JMP
(Math.JUMPTRUE304)
D=-1
(Math.JUMPWRITE304)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.ifFalse$14
@SP
M=M-1
A=M
D=M
@Math.ifFalse$14
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.ifEnd$14
@Math.ifEnd$14
0;JMP
// label Math.ifFalse$14
(Math.ifFalse$14)
// label Math.ifEnd$14
(Math.ifEnd$14)
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Math.while$15
(Math.while$15)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE319
D;JLT
D=0
@Math.JUMPWRITE319
0;JMP
(Math.JUMPTRUE319)
D=-1
(Math.JUMPWRITE319)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.whileEnd$15
@SP
M=M-1
A=M
D=M
@Math.whileEnd$15
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.while$15
@Math.while$15
0;JMP
// label Math.whileEnd$15
(Math.whileEnd$15)
// label Math.while$16
(Math.while$16)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Math.JUMPTRUE333
D;JGT
D=0
@Math.JUMPWRITE333
0;JMP
(Math.JUMPTRUE333)
D=-1
(Math.JUMPWRITE333)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Math.whileEnd$16
@SP
M=M-1
A=M
D=M
@Math.whileEnd$16
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Math.while$16
@Math.while$16
0;JMP
// label Math.whileEnd$16
(Math.whileEnd$16)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.init 0
(Memory.init)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 0
@Memory.0
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 2048
@2048
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@Memory.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 1
@Memory.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 1
@Memory.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push constant 14334
@14334
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.peek 0
(Memory.peek)
// push static 0
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.poke 0
(Memory.poke)
// push static 0
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.alloc 1
(Memory.alloc)
@SP
M=M+1
A=M-1
M=0
// push static 1
@Memory.1
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Memory.while$1
(Memory.while$1)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Memory.JUMPTRUE54
D;JLT
D=0
@Memory.JUMPWRITE54
0;JMP
(Memory.JUMPTRUE54)
D=-1
(Memory.JUMPWRITE54)
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Memory.JUMPTRUE57
D;JEQ
D=0
@Memory.JUMPWRITE57
0;JMP
(Memory.JUMPTRUE57)
D=-1
(Memory.JUMPWRITE57)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto Memory.whileEnd$1
@SP
M=M-1
A=M
D=M
@Memory.whileEnd$1
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Memory.while$1
@Memory.while$1
0;JMP
// label Memory.whileEnd$1
(Memory.whileEnd$1)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Memory.JUMPTRUE72
D;JEQ
D=0
@Memory.JUMPWRITE72
0;JMP
(Memory.JUMPTRUE72)
D=-1
(Memory.JUMPWRITE72)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Memory.ifFalse$2
@SP
M=M-1
A=M
D=M
@Memory.ifFalse$2
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Memory.ifEnd$2
@Memory.ifEnd$2
0;JMP
// label Memory.ifFalse$2
(Memory.ifFalse$2)
// label Memory.ifEnd$2
(Memory.ifEnd$2)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.deAlloc 1
(Memory.deAlloc)
@SP
M=M+1
A=M-1
M=0
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push static 1
@Memory.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 1
@Memory.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.init 0
(Output.init)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@Output.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 2
@Output.2
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 3
@Output.3
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 4
@Output.4
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Output.initMap 0
@Output.Output.initMap$ret.10
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.initMap
0;JMP
(Output.Output.initMap$ret.10)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.initMap 1
(Output.initMap)
@SP
M=M+1
A=M-1
M=0
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1
@Output.Array.new$ret.16
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.Array.new$ret.16)
// pop static 0
@Output.0
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.26
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.26)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 9
@Output.Output.create$ret.37
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@9
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.37)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 33
@33
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.47
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.47)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 34
@34
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 103
@103
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 107
@107
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 115
@115
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 34
@34
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.57
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.57)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 49
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 30
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.67
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.67)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 50
@50
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 35
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 28
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.77
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.77)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 51
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.87
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.87)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 52
@52
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.97
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.97)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 53
@53
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.107
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.107)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 54
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.117
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.117)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 55
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 97
@97
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.127
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.127)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 56
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.137
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.137)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 57
@57
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 126
@126
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.147
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.147)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 72
@72
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 127
@127
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.157
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.157)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 79
@79
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.167
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.167)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 87
@87
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 107
@107
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 107
@107
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.177
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.177)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 100
@100
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 126
@126
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 126
@126
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.187
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.187)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 101
@101
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 63
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.197
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.197)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 108
@108
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 14
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 12
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 24
@24
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.207
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.207)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 111
@111
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.217
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.217)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 114
@114
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 59
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 103
@103
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.227
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.227)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 119
@119
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 99
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 107
@107
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 107
@107
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 62
@62
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 8
@Output.Output.create$ret.237
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@8
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.Output.create$ret.237)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.create 1
(Output.create)
@SP
M=M+1
A=M-1
M=0
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1
@Output.Array.new$ret.243
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.Array.new$ret.243)
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 0
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 2
@2
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 3
@3
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 4
@4
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 5
@5
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 6
@6
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 7
@7
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 8
@8
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.getMap 0
(Output.getMap)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE322
D;JLT
D=0
@Output.JUMPWRITE322
0;JMP
(Output.JUMPTRUE322)
D=-1
(Output.JUMPWRITE322)
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 126
@126
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE325
D;JGT
D=0
@Output.JUMPWRITE325
0;JMP
(Output.JUMPTRUE325)
D=-1
(Output.JUMPWRITE325)
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D|M
// not
@SP
A=M-1
M=!M
// if-goto Output.ifFalse$1
@SP
M=M-1
A=M
D=M
@Output.ifFalse$1
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop argument 0
@0
D=A
@ARG
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.ifEnd$1
@Output.ifEnd$1
0;JMP
// label Output.ifFalse$1
(Output.ifFalse$1)
// label Output.ifEnd$1
(Output.ifEnd$1)
// push static 0
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.moveCursor 0
(Output.moveCursor)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 1
@Output.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 2
@Output.2
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printChar 5
(Output.printChar)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 128
@128
D=A
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE350
D;JEQ
D=0
@Output.JUMPWRITE350
0;JMP
(Output.JUMPTRUE350)
D=-1
(Output.JUMPWRITE350)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.ifFalse$2
@SP
M=M-1
A=M
D=M
@Output.ifFalse$2
D;JNE
// call Output.println 0
@Output.Output.println$ret.353
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.Output.println$ret.353)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Output.ifEnd$2
@Output.ifEnd$2
0;JMP
// label Output.ifFalse$2
(Output.ifFalse$2)
// label Output.ifEnd$2
(Output.ifEnd$2)
// push static 2
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2
@Output.Math.multiply$ret.362
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.Math.multiply$ret.362)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 1
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2
@Output.Math.multiply$ret.366
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.Math.multiply$ret.366)
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 0
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 4
@4
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 3
@3
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Output.while$3
(Output.while$3)
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE379
D;JLT
D=0
@Output.JUMPWRITE379
0;JMP
(Output.JUMPTRUE379)
D=-1
(Output.JUMPWRITE379)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.whileEnd$3
@SP
M=M-1
A=M
D=M
@Output.whileEnd$3
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.getAddress 2
@Output.Screen.getAddress$ret.386
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.getAddress
0;JMP
(Output.Screen.getAddress$ret.386)
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 4
@4
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.poke 2
@Output.Memory.poke$ret.394
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Output.Memory.poke$ret.394)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 3
@3
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.while$3
@Output.while$3
0;JMP
// label Output.whileEnd$3
(Output.whileEnd$3)
// push static 2
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop static 2
@Output.2
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 2
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// push static 4
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE408
D;JGT
D=0
@Output.JUMPWRITE408
0;JMP
(Output.JUMPTRUE408)
D=-1
(Output.JUMPWRITE408)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.ifFalse$4
@SP
M=M-1
A=M
D=M
@Output.ifFalse$4
D;JNE
// call Output.println 0
@Output.Output.println$ret.411
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.Output.println$ret.411)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.ifEnd$4
@Output.ifEnd$4
0;JMP
// label Output.ifFalse$4
(Output.ifFalse$4)
// label Output.ifEnd$4
(Output.ifEnd$4)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printString 1
(Output.printString)
@SP
M=M+1
A=M-1
M=0
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Output.while$5
(Output.while$5)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.length 1
@Output.String.length$ret.424
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.length
0;JMP
(Output.String.length$ret.424)
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE425
D;JLT
D=0
@Output.JUMPWRITE425
0;JMP
(Output.JUMPTRUE425)
D=-1
(Output.JUMPWRITE425)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.whileEnd$5
@SP
M=M-1
A=M
D=M
@Output.whileEnd$5
D;JNE
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.charAt 2
@Output.String.charAt$ret.430
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.charAt
0;JMP
(Output.String.charAt$ret.430)
// call Output.printChar 1
@Output.Output.printChar$ret.431
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.Output.printChar$ret.431)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.while$5
@Output.while$5
0;JMP
// label Output.whileEnd$5
(Output.whileEnd$5)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printInt 3
(Output.printInt)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs 1
@Output.Math.abs$ret.445
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Output.Math.abs$ret.445)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Output.while$6
(Output.while$6)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE450
D;JGT
D=0
@Output.JUMPWRITE450
0;JMP
(Output.JUMPTRUE450)
D=-1
(Output.JUMPWRITE450)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.whileEnd$6
@SP
M=M-1
A=M
D=M
@Output.whileEnd$6
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2
@Output.Math.divide$ret.459
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Output.Math.divide$ret.459)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.while$6
@Output.while$6
0;JMP
// label Output.whileEnd$6
(Output.whileEnd$6)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE465
D;JLT
D=0
@Output.JUMPWRITE465
0;JMP
(Output.JUMPTRUE465)
D=-1
(Output.JUMPWRITE465)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.ifFalse$7
@SP
M=M-1
A=M
D=M
@Output.ifFalse$7
D;JNE
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE470
D;JEQ
D=0
@Output.JUMPWRITE470
0;JMP
(Output.JUMPTRUE470)
D=-1
(Output.JUMPWRITE470)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.ifFalse$8
@SP
M=M-1
A=M
D=M
@Output.ifFalse$8
D;JNE
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.ifEnd$8
@Output.ifEnd$8
0;JMP
// label Output.ifFalse$8
(Output.ifFalse$8)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Output.ifEnd$8
(Output.ifEnd$8)
// goto Output.ifEnd$7
@Output.ifEnd$7
0;JMP
// label Output.ifFalse$7
(Output.ifFalse$7)
// label Output.ifEnd$7
(Output.ifEnd$7)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.new 1
@Output.String.new$ret.486
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Output.String.new$ret.486)
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.setInt 2
@Output.String.setInt$ret.490
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.setInt
0;JMP
(Output.String.setInt$ret.490)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printString 1
@Output.Output.printString$ret.493
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.Output.printString$ret.493)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.println 0
(Output.println)
// push static 1
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop static 1
@Output.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 1
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push static 3
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE504
D;JGT
D=0
@Output.JUMPWRITE504
0;JMP
(Output.JUMPTRUE504)
D=-1
(Output.JUMPWRITE504)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.ifFalse$9
@SP
M=M-1
A=M
D=M
@Output.ifFalse$9
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@Output.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.ifEnd$9
@Output.ifEnd$9
0;JMP
// label Output.ifFalse$9
(Output.ifFalse$9)
// label Output.ifEnd$9
(Output.ifEnd$9)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 2
@Output.2
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.backSpace 2
(Output.backSpace)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push static 1
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 2
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE525
D;JLT
D=0
@Output.JUMPWRITE525
0;JMP
(Output.JUMPTRUE525)
D=-1
(Output.JUMPWRITE525)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.ifFalse$10
@SP
M=M-1
A=M
D=M
@Output.ifFalse$10
D;JNE
// push static 4
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 1
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.ifEnd$10
@Output.ifEnd$10
0;JMP
// label Output.ifFalse$10
(Output.ifFalse$10)
// label Output.ifEnd$10
(Output.ifEnd$10)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Output.JUMPTRUE539
D;JLT
D=0
@Output.JUMPWRITE539
0;JMP
(Output.JUMPTRUE539)
D=-1
(Output.JUMPWRITE539)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Output.ifFalse$11
@SP
M=M-1
A=M
D=M
@Output.ifFalse$11
D;JNE
// push static 3
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Output.ifEnd$11
@Output.ifEnd$11
0;JMP
// label Output.ifFalse$11
(Output.ifFalse$11)
// label Output.ifEnd$11
(Output.ifEnd$11)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 2
@Output.2
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 1
@Output.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.printChar 1
@Output.Output.printChar$ret.552
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.Output.printChar$ret.552)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 2
@Output.2
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 1
@Output.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.init 0
(Screen.init)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// pop static 0
@Screen.0
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.setColor 0
(Screen.setColor)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 0
@Screen.0
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.clearScreen 1
(Screen.clearScreen)
@SP
M=M+1
A=M-1
M=0
// push constant 32767
@32767
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Screen.while$1
(Screen.while$1)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32510
@32510
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE18
D;JGT
D=0
@Screen.JUMPWRITE18
0;JMP
(Screen.JUMPTRUE18)
D=-1
(Screen.JUMPWRITE18)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Screen.whileEnd$1
@SP
M=M-1
A=M
D=M
@Screen.whileEnd$1
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.poke 2
@Screen.Memory.poke$ret.23
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Screen.Memory.poke$ret.23)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Screen.while$1
@Screen.while$1
0;JMP
// label Screen.whileEnd$1
(Screen.whileEnd$1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawPixel 2
(Screen.drawPixel)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.getAddress 2
@Screen.Screen.getAddress$ret.36
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.getAddress
0;JMP
(Screen.Screen.getAddress$ret.36)
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.mod 2
@Screen.Math.mod$ret.40
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.mod
0;JMP
(Screen.Math.mod$ret.40)
// pop argument 1
@1
D=A
@ARG
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.powerOfTwo 1
@Screen.Math.powerOfTwo$ret.43
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.powerOfTwo
0;JMP
(Screen.Math.powerOfTwo$ret.43)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push static 0
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$2
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$2
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.peek 1
@Screen.Memory.peek$ret.49
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Screen.Memory.peek$ret.49)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// or
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D|M
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Screen.ifEnd$2
@Screen.ifEnd$2
0;JMP
// label Screen.ifFalse$2
(Screen.ifFalse$2)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.peek 1
@Screen.Memory.peek$ret.56
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Screen.Memory.peek$ret.56)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Screen.ifEnd$2
(Screen.ifEnd$2)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.poke 2
@Screen.Memory.poke$ret.64
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Screen.Memory.poke$ret.64)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.refresh 0
(Screen.refresh)
// refreshScreen
refreshscreen
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.getAddress 1
(Screen.getAddress)
@SP
M=M+1
A=M-1
M=0
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE75
D;JLT
D=0
@Screen.JUMPWRITE75
0;JMP
(Screen.JUMPTRUE75)
D=-1
(Screen.JUMPWRITE75)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$3
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$3
D;JNE
// push constant 32607
@32607
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Screen.ifEnd$3
@Screen.ifEnd$3
0;JMP
// label Screen.ifFalse$3
(Screen.ifFalse$3)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop argument 0
@0
D=A
@ARG
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 32735
@32735
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Screen.ifEnd$3
(Screen.ifEnd$3)
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE91
D;JGT
D=0
@Screen.JUMPWRITE91
0;JMP
(Screen.JUMPTRUE91)
D=-1
(Screen.JUMPWRITE91)
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 16
@16
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE94
D;JLT
D=0
@Screen.JUMPWRITE94
0;JMP
(Screen.JUMPTRUE94)
D=-1
(Screen.JUMPWRITE94)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$4
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$4
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Screen.ifEnd$4
@Screen.ifEnd$4
0;JMP
// label Screen.ifFalse$4
(Screen.ifFalse$4)
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE106
D;JGT
D=0
@Screen.JUMPWRITE106
0;JMP
(Screen.JUMPTRUE106)
D=-1
(Screen.JUMPWRITE106)
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE109
D;JLT
D=0
@Screen.JUMPWRITE109
0;JMP
(Screen.JUMPTRUE109)
D=-1
(Screen.JUMPWRITE109)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$5
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$5
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 32
@32
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 23
@23
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE119
D;JGT
D=0
@Screen.JUMPWRITE119
0;JMP
(Screen.JUMPTRUE119)
D=-1
(Screen.JUMPWRITE119)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$6
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$6
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Screen.ifEnd$6
@Screen.ifEnd$6
0;JMP
// label Screen.ifFalse$6
(Screen.ifFalse$6)
// label Screen.ifEnd$6
(Screen.ifEnd$6)
// goto Screen.ifEnd$5
@Screen.ifEnd$5
0;JMP
// label Screen.ifFalse$5
(Screen.ifFalse$5)
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 31
@31
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE133
D;JGT
D=0
@Screen.JUMPWRITE133
0;JMP
(Screen.JUMPTRUE133)
D=-1
(Screen.JUMPWRITE133)
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE136
D;JLT
D=0
@Screen.JUMPWRITE136
0;JMP
(Screen.JUMPTRUE136)
D=-1
(Screen.JUMPWRITE136)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$7
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$7
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 64
@64
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 39
@39
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE146
D;JGT
D=0
@Screen.JUMPWRITE146
0;JMP
(Screen.JUMPTRUE146)
D=-1
(Screen.JUMPWRITE146)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$8
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$8
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Screen.ifEnd$8
@Screen.ifEnd$8
0;JMP
// label Screen.ifFalse$8
(Screen.ifFalse$8)
// label Screen.ifEnd$8
(Screen.ifEnd$8)
// goto Screen.ifEnd$7
@Screen.ifEnd$7
0;JMP
// label Screen.ifFalse$7
(Screen.ifFalse$7)
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 47
@47
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE160
D;JGT
D=0
@Screen.JUMPWRITE160
0;JMP
(Screen.JUMPTRUE160)
D=-1
(Screen.JUMPWRITE160)
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 64
@64
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE163
D;JLT
D=0
@Screen.JUMPWRITE163
0;JMP
(Screen.JUMPTRUE163)
D=-1
(Screen.JUMPWRITE163)
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$9
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$9
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 96
@96
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 55
@55
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Screen.JUMPTRUE173
D;JGT
D=0
@Screen.JUMPWRITE173
0;JMP
(Screen.JUMPTRUE173)
D=-1
(Screen.JUMPWRITE173)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Screen.ifFalse$10
@SP
M=M-1
A=M
D=M
@Screen.ifFalse$10
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Screen.ifEnd$10
@Screen.ifEnd$10
0;JMP
// label Screen.ifFalse$10
(Screen.ifFalse$10)
// label Screen.ifEnd$10
(Screen.ifEnd$10)
// goto Screen.ifEnd$9
@Screen.ifEnd$9
0;JMP
// label Screen.ifFalse$9
(Screen.ifFalse$9)
// label Screen.ifEnd$9
(Screen.ifEnd$9)
// label Screen.ifEnd$7
(Screen.ifEnd$7)
// label Screen.ifEnd$5
(Screen.ifEnd$5)
// label Screen.ifEnd$4
(Screen.ifEnd$4)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.init 0
(String.init)
// push constant 128
@128
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 0
@String.0
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 129
@129
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 1
@String.1
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 34
@34
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 2
@String.2
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 45
@45
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 3
@String.3
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 48
@48
D=A
@SP
M=M+1
A=M-1
M=D
// pop static 4
@String.4
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.new 0
(String.new)
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc 1
@String.Memory.alloc$ret.16
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(String.Memory.alloc$ret.16)
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 1
@1
D=A
@THIS
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@String.JUMPTRUE22
D;JGT
D=0
@String.JUMPWRITE22
0;JMP
(String.JUMPTRUE22)
D=-1
(String.JUMPWRITE22)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto String.ifFalse$1
@SP
M=M-1
A=M
D=M
@String.ifFalse$1
D;JNE
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.new 1
@String.Array.new$ret.26
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.Array.new$ret.26)
// pop this 0
@0
D=A
@THIS
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto String.ifEnd$1
@String.ifEnd$1
0;JMP
// label String.ifFalse$1
(String.ifFalse$1)
// label String.ifEnd$1
(String.ifEnd$1)
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.dispose 0
(String.dispose)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@String.JUMPTRUE38
D;JGT
D=0
@String.JUMPWRITE38
0;JMP
(String.JUMPTRUE38)
D=-1
(String.JUMPWRITE38)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto String.ifFalse$2
@SP
M=M-1
A=M
D=M
@String.ifFalse$2
D;JNE
// push this 0
@0
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.dispose 1
@String.Array.dispose$ret.42
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.Array.dispose$ret.42)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto String.ifEnd$2
@String.ifEnd$2
0;JMP
// label String.ifFalse$2
(String.ifFalse$2)
// label String.ifEnd$2
(String.ifEnd$2)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.length 0
(String.length)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push this 1
@1
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.charAt 0
(String.charAt)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.setCharAt 0
(String.setCharAt)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 2
@2
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.appendChar 0
(String.appendChar)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push this 0
@0
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// pop pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
// push temp 0
@0
D=A
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop that 0
@0
D=A
@THAT
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push this 1
@1
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop this 1
@1
D=A
@THIS
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.eraseLastChar 0
(String.eraseLastChar)
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push this 1
@1
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// pop this 1
@1
D=A
@THIS
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.intValue 4
(String.intValue)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call String.charAt 2
@String.String.charAt$ret.111
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.charAt
0;JMP
(String.String.charAt$ret.111)
// push static 3
@String.3
D=M
@SP
M=M+1
A=M-1
M=D
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@String.JUMPTRUE113
D;JEQ
D=0
@String.JUMPWRITE113
0;JMP
(String.JUMPTRUE113)
D=-1
(String.JUMPWRITE113)
@SP
A=M
M=D
@SP
M=M+1
// pop local 3
@3
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto String.ifFalse$3
@SP
M=M-1
A=M
D=M
@String.ifFalse$3
D;JNE
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto String.ifEnd$3
@String.ifEnd$3
0;JMP
// label String.ifFalse$3
(String.ifFalse$3)
// label String.ifEnd$3
(String.ifEnd$3)
// label String.while$4
(String.while$4)
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push this 1
@1
D=A
@THIS
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@String.JUMPTRUE128
D;JLT
D=0
@String.JUMPWRITE128
0;JMP
(String.JUMPTRUE128)
D=-1
(String.JUMPWRITE128)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto String.whileEnd$4
@SP
M=M-1
A=M
D=M
@String.whileEnd$4
D;JNE
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2
@String.Math.multiply$ret.133
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.Math.multiply$ret.133)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.charAt 2
@String.String.charAt$ret.137
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.charAt
0;JMP
(String.String.charAt$ret.137)
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static 4
@String.4
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto String.while$4
@String.while$4
0;JMP
// label String.whileEnd$4
(String.whileEnd$4)
// push local 3
@3
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if-goto String.ifFalse$5
@SP
M=M-1
A=M
D=M
@String.ifFalse$5
D;JNE
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=M-1
M=!M
// call Math.multiply 2
@String.Math.multiply$ret.157
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.Math.multiply$ret.157)
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto String.ifEnd$5
@String.ifEnd$5
0;JMP
// label String.ifFalse$5
(String.ifFalse$5)
// label String.ifEnd$5
(String.ifEnd$5)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.setInt 1
(String.setInt)
@SP
M=M+1
A=M-1
M=0
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop this 1
@1
D=A
@THIS
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@String.JUMPTRUE171
D;JLT
D=0
@String.JUMPWRITE171
0;JMP
(String.JUMPTRUE171)
D=-1
(String.JUMPWRITE171)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto String.ifFalse$6
@SP
M=M-1
A=M
D=M
@String.ifFalse$6
D;JNE
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push static 3
@String.3
D=M
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@String.String.appendChar$ret.176
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.String.appendChar$ret.176)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto String.ifEnd$6
@String.ifEnd$6
0;JMP
// label String.ifFalse$6
(String.ifFalse$6)
// label String.ifEnd$6
(String.ifEnd$6)
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs 1
@String.Math.abs$ret.183
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(String.Math.abs$ret.183)
// call String.setIntRec 2
@String.String.setIntRec$ret.184
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.setIntRec
0;JMP
(String.String.setIntRec$ret.184)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.setIntRec 1
(String.setIntRec)
@SP
M=M+1
A=M-1
M=0
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop pointer 0
@SP
M=M-1
A=M
D=M
@THIS
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.mod 2
@String.Math.mod$ret.193
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.mod
0;JMP
(String.Math.mod$ret.193)
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@String.JUMPTRUE197
D;JLT
D=0
@String.JUMPWRITE197
0;JMP
(String.JUMPTRUE197)
D=-1
(String.JUMPWRITE197)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto String.ifFalse$7
@SP
M=M-1
A=M
D=M
@String.ifFalse$7
D;JNE
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static 4
@String.4
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// call String.appendChar 2
@String.String.appendChar$ret.204
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.String.appendChar$ret.204)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto String.ifEnd$7
@String.ifEnd$7
0;JMP
// label String.ifFalse$7
(String.ifFalse$7)
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 1
@1
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 10
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2
@String.Math.divide$ret.211
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(String.Math.divide$ret.211)
// call String.setIntRec 2
@String.String.setIntRec$ret.212
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.setIntRec
0;JMP
(String.String.setIntRec$ret.212)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static 4
@String.4
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// call String.appendChar 2
@String.String.appendChar$ret.218
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.String.appendChar$ret.218)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label String.ifEnd$7
(String.ifEnd$7)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.newLine 0
(String.newLine)
// push static 0
@String.0
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.backSpace 0
(String.backSpace)
// push static 1
@String.1
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.doubleQuote 0
(String.doubleQuote)
// push static 2
@String.2
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// call Memory.init 0
@Sys.Memory.init$ret.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.Memory.init$ret.2)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Math.init 0
@Sys.Math.init$ret.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.Math.init$ret.4)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Screen.init 0
@Sys.Screen.init$ret.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.init
0;JMP
(Sys.Screen.init$ret.6)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Output.init 0
@Sys.Output.init$ret.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.init
0;JMP
(Sys.Output.init$ret.8)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call String.init 0
@Sys.String.init$ret.10
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.init
0;JMP
(Sys.String.init$ret.10)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Main.main 0
@Sys.Main.main$ret.12
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.Main.main$ret.12)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Sys.halt 0
@Sys.Sys.halt$ret.14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.Sys.halt$ret.14)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.halt 0
(Sys.halt)
// label Sys.while$1
(Sys.while$1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto Sys.whileEnd$1
@SP
M=M-1
A=M
D=M
@Sys.whileEnd$1
D;JNE
// goto Sys.while$1
@Sys.while$1
0;JMP
// label Sys.whileEnd$1
(Sys.whileEnd$1)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.wait 3
(Sys.wait)
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
@SP
M=M+1
A=M-1
M=0
// push constant 300
@300
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 0
@0
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Sys.while$2
(Sys.while$2)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Sys.JUMPTRUE36
D;JLT
D=0
@Sys.JUMPWRITE36
0;JMP
(Sys.JUMPTRUE36)
D=-1
(Sys.JUMPWRITE36)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Sys.whileEnd$2
@SP
M=M-1
A=M
D=M
@Sys.whileEnd$2
D;JNE
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// label Sys.while$3
(Sys.while$3)
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push local 0
@0
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@13
M=D
@Sys.JUMPTRUE44
D;JLT
D=0
@Sys.JUMPWRITE44
0;JMP
(Sys.JUMPTRUE44)
D=-1
(Sys.JUMPWRITE44)
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto Sys.whileEnd$3
@SP
M=M-1
A=M
D=M
@Sys.whileEnd$3
D;JNE
// push local 2
@2
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 2
@2
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Sys.while$3
@Sys.while$3
0;JMP
// label Sys.whileEnd$3
(Sys.whileEnd$3)
// push local 1
@1
D=A
@LCL
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
// pop local 1
@1
D=A
@LCL
A=M
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// goto Sys.while$2
@Sys.while$2
0;JMP
// label Sys.whileEnd$2
(Sys.whileEnd$2)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.error 0
(Sys.error)
// push constant 3
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1
@Sys.String.new$ret.63
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Sys.String.new$ret.63)
// push constant 69
@69
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@Sys.String.appendChar$ret.65
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.String.appendChar$ret.65)
// push constant 82
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@Sys.String.appendChar$ret.67
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.String.appendChar$ret.67)
// push constant 82
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2
@Sys.String.appendChar$ret.69
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.String.appendChar$ret.69)
// call Output.printString 1
@Sys.Output.printString$ret.70
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Sys.Output.printString$ret.70)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printInt 1
@Sys.Output.printInt$ret.73
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(Sys.Output.printInt$ret.73)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Output.println 0
@Sys.Output.println$ret.75
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Sys.Output.println$ret.75)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// call Sys.halt 0
@Sys.Sys.halt$ret.77
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.Sys.halt$ret.77)
// pop temp 0
@0
D=A
@5
A=D+A
D=A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
