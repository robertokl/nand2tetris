// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    static int newLine, backSpace, doubleQuote, negative, sToI;
    field Array str;
    field int length;

    function void init() {
        let newLine = 128;
        let backSpace = 129;
        let doubleQuote = 34;
        let negative = 45;
        let sToI = 48;
        return;
    }

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if (maxLength > 0) {
            let str = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (str > 0) {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, c;
        var boolean neg;
        let i = 0;
        let val = 0;
        let neg = (charAt(0) = negative);
        if (neg) {
            let i = i + 1;
        }
        while (i < length) {
            let val = val * 10;
            let c = charAt(i);
            let val = val + (c - sToI);
            let i = i + 1;
        }
        if (neg) {
            let val = val * (-1);
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int c;
        let length = 0;
        if (val < 0) {
            do appendChar(negative);
        }
        let val = Math.abs(val);
        if (val < 0) { // -32768
            do appendChar(51);
            do appendChar(50);
            do appendChar(55);
            do appendChar(54);
            do appendChar(56);
            return;
        }
        do setIntRec();
        return;
    }

    method void setIntRec(int val) {
        var int c;
        let c = Math.mod(val, 10);
        if (val < 10) {
            do appendChar(c + sToI);
        } else {
            do setIntRec(val / 10);
            do appendChar(c + sToI);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return newLine;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return backSpace;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return doubleQuote;
    }
}
